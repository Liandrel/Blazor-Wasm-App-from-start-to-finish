@page "/Order/Display/{Id:int}"


@inject HttpClient _http
@inject NavigationManager _navigationManager


<h3>Display</h3>

@if(string.IsNullOrWhiteSpace(errorString) == false)
{
    <h4>System Error</h4>
    <h4>@errorString</h4>
}
else if( orderInfo.Order is null)
{
    <h4> Record Loading...</h4>
}
else
{
        <table class="table">
            <tbody>
                <tr>
                    <td><strong>Order Name</strong></td>
                    <td>@orderInfo.Order.OrderName</td>
                </tr>
                <tr>
                    <td><strong>Order Date</strong></td>
                    <td>@orderInfo.Order.OrderDate</td>
                </tr>
                <tr>
                    <td><strong>Order Total</strong></td>
                    <td>@orderInfo.Order.Total.ToString("C",CultureInfo.CreateSpecificCulture("en-US"))</td>
                </tr>
                <tr>
                    <td><strong>Item Ordered</strong></td>
                    <td>@orderInfo.ItemPurchased</td>
                </tr>
                <tr>
                    <td><strong>Quantity Ordered</strong></td>
                    <td>@orderInfo.Order.Quantity</td>
                </tr>
                @*<tr>
                    <td colspan="2">
                    @if (confirmDelete == true)
                    {
                            <button class="btn btn-outline-danger" @onclick="HandleOrderDeleteAsync">Confirm Order</button>
                            <button class="btn btn-secondary" @onclick="(() => confirmDelete = false)">Cancel</button>
                    }
                    else
                    {
                            <button class="btn btn-danger" @onclick="(() => confirmDelete = true)">Delete Order</button>
                    }
                    </td>
                </tr>*@
        </tbody>
        </table>

            <EditForm Model="@updateModel" OnValidSubmit="HandleValidSubmitAsync">
            <DataAnnotationsValidator />
            <ValidationSummary Model="@updateModel" />

            <div class="form-group">
                <label class="control-label"> Name for the Order</label>
                <InputText @bind-Value="updateModel.OrderName" class="form-control" />
                <ValidationMessage For="@(() => updateModel.OrderName)" class="text-danger" />
            </div>
            <div class="form-group">
                <input type="submit" value="Update Order name" class=" btn btn-primary mt-1" />
            </div>

        </EditForm>
}


@code {
    [Parameter]
    public int Id { get; set; }

    private OrderResultModel orderInfo = new();
    private OrderUpdateModel updateModel = new();
    private string errorString;

    protected override async Task OnInitializedAsync()
    {
        HttpResponseMessage response = await _http.GetAsync($"api/order/{Id}");

        if(response.IsSuccessStatusCode)
        {
            orderInfo = await response.Content.ReadFromJsonAsync<OrderResultModel>();
            updateModel.Id = orderInfo.Order.Id;
            updateModel.OrderName = orderInfo.Order.OrderName;
        }
        else
        {
            errorString = response.ReasonPhrase;
        }
    }

    private async Task HandleValidSubmitAsync()
    {
        try
        {
            HttpResponseMessage response = await _http.PutAsJsonAsync("api/order", updateModel);
            orderInfo.Order.OrderName = updateModel.OrderName;
        }
        catch (Exception ex)
        {
            errorString = ex.Message;
        }
    }
}
